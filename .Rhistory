d_SJ <- d %>% filter(Specie == "SJ")
temp_SJ <- kruskal.test(Rate ~ Strain, data = d_SJ)
temp_SJ
d_SM <- d %>% filter(Specie == "SM")
temp_SM <- kruskal.test(Rate ~ Strain, data = d_SM)
temp_SM
d_SP <- d %>% filter(Specie == "SP")
temp_SP <- kruskal.test(Rate ~ Strain, data = d_SP)
temp_SP
d_SC <- d %>% filter(Specie == "SC")
temp_SC <- kruskal.test(Rate ~ Strain, data = d_SC)
temp_SC
d
d <- read.table(file_path, header = TRUE, stringsAsFactors = FALSE)
d$Specie <- ordered(d$Specie, levels = c("SE","SU","SA","SK","SJ","SM","SP","SC"))
d$Temperature <- as.character(d$Temperature)
d_SE <- d %>% filter(Specie == "SE")
temp_SE <- kruskal.test(Rate ~ Strain, data = d_SE)
temp_SE
d_SU <- d %>% filter(Specie == "SU")
temp_SU <- kruskal.test(Rate ~ Strain, data = d_SU)
temp_SU
d_SA <- d %>% filter(Specie == "SA")
temp_SA <- kruskal.test(Rate ~ Strain, data = d_SA)
temp_SA
d_SK <- d %>% filter(Specie == "SK")
temp_SK <- kruskal.test(Rate ~ Strain, data = d_SK)
temp_SK
d_SJ <- d %>% filter(Specie == "SJ")
temp_SJ <- kruskal.test(Rate ~ Strain, data = d_SJ)
temp_SJ
d_SM <- d %>% filter(Specie == "SM")
temp_SM <- kruskal.test(Rate ~ Strain, data = d_SM)
temp_SM
d_SP <- d %>% filter(Specie == "SP")
temp_SP <- kruskal.test(Rate ~ Strain, data = d_SP)
temp_SP
d_SC <- d %>% filter(Specie == "SC")
temp_SC <- kruskal.test(Rate ~ Strain, data = d_SC)
temp_SC
# Leer los datos
d <- read.table(file_path, header = TRUE, stringsAsFactors = FALSE)
d$Specie <- ordered(d$Specie, levels = c("SE", "SU", "SA", "SK", "SJ", "SM", "SP", "SC"))
d$Temperature <- as.character(d$Temperature)
# Lista de especies
especies <- c("SE", "SU", "SA", "SK", "SJ", "SM", "SP", "SC")
# Lista para almacenar resultados
resultados_kruskal <- list()
# Loop para Kruskal-Wallis
for (esp in especies) {
datos <- d %>% filter(Specie == esp)
# Verificar si hay suficientes datos para el test
if (length(unique(datos$Strain)) > 1) {
test_result <- kruskal.test(Rate ~ Strain, data = datos)
# Guardar resultados en lista
resultados_kruskal[[esp]] <- data.frame(
Especie = esp,
Chi_squared = test_result$statistic,
df = test_result$parameter,
P_value = test_result$p.value
)
} else {
warning(paste("No se puede realizar Kruskal-Wallis para", esp, "por falta de datos suficientes."))
}
}
# Convertir la lista en un data frame
tabla_resultados_kruskal <- do.call(rbind, resultados_kruskal)
# Definir el nombre del archivo de salida
output_file_kruskal <- file.path(output_dir, "KruskalWallis_Results_Species.csv")
# Guardar la tabla en formato CSV
write.csv(tabla_resultados_kruskal, file = output_file_kruskal, row.names = FALSE)
# Ver los primeros resultados
head(tabla_resultados_kruskal)
# Leer los datos
d <- read.table(file_path, header = TRUE, stringsAsFactors = FALSE)
d$Specie <- ordered(d$Specie, levels = c("SE", "SU", "SA", "SK", "SJ", "SM", "SP", "SC"))
d$Temperature <- as.character(d$Temperature)
# Lista de especies
especies <- c("SE", "SU", "SA", "SK", "SJ", "SM", "SP", "SC")
# Lista para almacenar resultados
resultados_kruskal <- list()
# Loop para Kruskal-Wallis
for (esp in especies) {
datos <- d %>% filter(Specie == esp)
# Verificar si hay suficientes datos para el test
if (length(unique(datos$Strain)) > 1) {
test_result <- kruskal.test(Rate ~ Temperature, data = datos)
# Guardar resultados en lista
resultados_kruskal[[esp]] <- data.frame(
Especie = esp,
Chi_squared = test_result$statistic,
df = test_result$parameter,
P_value = test_result$p.value
)
} else {
warning(paste("No se puede realizar Kruskal-Wallis para", esp, "por falta de datos suficientes."))
}
}
# Convertir la lista en un data frame
tabla_resultados_kruskal <- do.call(rbind, resultados_kruskal)
# Definir el nombre del archivo de salida
output_file_kruskal <- file.path(output_dir, "KruskalWallis_Results_Temperature.csv")
# Guardar la tabla en formato CSV
write.csv(tabla_resultados_kruskal, file = output_file_kruskal, row.names = FALSE)
# Ver los primeros resultados
head(tabla_resultados_kruskal)
d <- read.table(file_path, header = TRUE, stringsAsFactors = FALSE)
d$Specie <- ordered(d$Specie, levels = c("SE", "SU", "SA", "SK", "SJ", "SM", "SP", "SC"))
d$Temperature <- as.character(d$Temperature)
# Lista de especies
especies <- c("SE", "SU", "SA", "SK", "SJ", "SM", "SP", "SC")
# Lista para almacenar los resultados
resultados_lista <- list()
# Bucle para realizar Dunn's test en cada especie
for (esp in especies) {
datos <- get(paste0("d_", esp)) # Obtener el data frame dinámicamente
# Convertir 'Strain' en factor
d$Strain <- as.factor(datos$Strain)
# Verificar si hay al menos dos grupos con más de una observación
if (length(unique(datos$Strain)) > 1 && all(table(datos$Strain) > 1)) {
# Ejecutar Dunn's test
resultado <- dunn.test(datos$Rate, datos$Strain, method = "BH", table = FALSE)
# Extraer los nombres de los grupos comparados (CORREGIDO)
comparaciones <- as.data.frame(do.call(rbind, strsplit(resultado$comparisons, " - ")))
# Extraer los p-values ajustados
pvalues <- resultado$P.adjusted
# Crear un data frame con los resultados
tabla_resultados <- data.frame(
Grupo1 = comparaciones$V1,
Grupo2 = comparaciones$V2,
P_value = pvalues
)
# Guardar el data frame en la lista con el nombre de la especie
resultados_lista[[esp]] <- tabla_resultados
} else {
warning(paste("No se puede realizar Dunn's test para", esp, "debido a grupos insuficientes"))
}
}
library(dplyr)
library(dunn.test)
# Leer los datos
d <- read.table(file_path, header = TRUE, stringsAsFactors = FALSE)
d$Specie <- ordered(d$Specie, levels = c("SE", "SU", "SA", "SK", "SJ", "SM", "SP", "SC"))
d$Temperature <- as.character(d$Temperature)
# Lista de especies
especies <- c("SE", "SU", "SA", "SK", "SJ", "SM", "SP", "SC")
# Lista para almacenar los resultados
resultados_lista <- list()
# Bucle para realizar Dunn's test en cada especie
for (esp in especies) {
datos <- d %>% filter(Specie == esp)  # Filtrar por especie
# Convertir 'Strain' en factor solo en los datos filtrados
datos$Strain <- as.factor(datos$Strain)
# Verificar si hay al menos dos grupos con más de una observación
if (length(unique(datos$Strain)) > 1 && all(table(datos$Strain) > 1)) {
# Ejecutar Dunn's test
resultado <- dunn.test(datos$Rate, datos$Strain, method = "BH", table = FALSE)
# Extraer los nombres de los grupos comparados
comparaciones <- do.call(rbind, strsplit(resultado$comparisons, " - "))
# Crear un data frame con los resultados
tabla_resultados <- data.frame(
Grupo1 = comparaciones[, 1],
Grupo2 = comparaciones[, 2],
P_value = resultado$P.adjusted
)
# Agregar la columna de la especie
tabla_resultados$Especie <- esp
# Guardar en la lista
resultados_lista[[esp]] <- tabla_resultados
} else {
warning(paste("No se puede realizar Dunn's test para", esp, "debido a grupos insuficientes"))
}
}
datos
datos <- d %>% filter(Specie == "SE")
datos
datos$Strain <- as.factor(datos$Strain)
resultado <- dunn.test(datos$Rate, datos$Strain, method = "BH", table = FALSE)
comparaciones <- do.call(rbind, strsplit(resultado$comparisons, " - "))
library(dplyr)
library(dunn.test)
# Leer los datos
d <- read.table(file_path, header = TRUE, stringsAsFactors = FALSE)
d$Specie <- ordered(d$Specie, levels = c("SE", "SU", "SA", "SK", "SJ", "SM", "SP", "SC"))
d$Temperature <- as.character(d$Temperature)
# Lista de especies
especies <- c("SE", "SU", "SA", "SK", "SJ", "SM", "SP", "SC")
# Lista para almacenar los resultados
resultados_lista <- list()
# Bucle para realizar Dunn's test en cada especie
for (esp in especies) {
datos <- d %>% filter(Specie == esp)  # Filtrar por especie
# Convertir 'Strain' en factor solo en los datos filtrados
datos$Strain <- as.factor(datos$Strain)
# Verificar si hay al menos dos grupos con más de una observación
if (length(unique(datos$Strain)) > 1 && all(table(datos$Strain) > 1)) {
# Ejecutar Dunn's test
resultado <- dunn.test(datos$Rate, datos$Strain, method = "BH", table = FALSE)
# Extraer los nombres de los grupos comparados
comparaciones <- do.call(rbind, strsplit(resultado$comparisons, " - "))
# Crear un data frame con los resultados
tabla_resultados <- data.frame(
Grupo1 = comparaciones[, 1],
Grupo2 = comparaciones[, 2],
P_value = resultado$P.adjusted
)
# Agregar la columna de la especie
tabla_resultados$Especie <- esp
# Guardar en la lista
resultados_lista[[esp]] <- tabla_resultados
} else {
warning(paste("No se puede realizar Dunn's test para", esp, "debido a grupos insuficientes"))
}
}
# Leer los datos
d <- read.table(file_path, header = TRUE, stringsAsFactors = FALSE)
d$Specie <- ordered(d$Specie, levels = c("SE", "SU", "SA", "SK", "SJ", "SM", "SP", "SC"))
d$Temperature <- as.character(d$Temperature)
# Lista de especies
especies <- c("SE", "SU", "SA", "SK", "SJ", "SM", "SP", "SC")
# Lista para almacenar los resultados
resultados_lista <- list()
# Bucle para realizar Dunn's test en cada especie
for (esp in especies) {
datos <- d %>% filter(Specie == esp)  # Filtrar por especie
# Convertir 'Strain' en factor solo en los datos filtrados
datos$Strain <- as.factor(datos$Strain)
# Verificar si hay al menos dos grupos con más de una observación
if (length(unique(datos$Strain)) > 1 && all(table(datos$Strain) > 1)) {
# Ejecutar Dunn's test
resultado <- dunn.test(datos$Rate, datos$Strain, method = "BH", table = FALSE)
# Verificar si hay resultados
if (length(resultado$comparisons) > 0) {
comparaciones <- do.call(rbind, strsplit(resultado$comparisons, " - "))
# Si solo hay una comparación, convertir a matriz
if (is.null(dim(comparaciones))) {
comparaciones <- matrix(comparaciones, ncol = 2, byrow = TRUE)
}
# Crear un data frame con los resultados
tabla_resultados <- data.frame(
Grupo1 = comparaciones[, 1],
Grupo2 = comparaciones[, 2],
P_value = resultado$P.adjusted
)
# Agregar la columna de la especie
tabla_resultados$Especie <- esp
# Guardar en la lista
resultados_lista[[esp]] <- tabla_resultados
} else {
warning(paste("No hay comparaciones para", esp))
}
} else {
warning(paste("No se puede realizar Dunn's test para", esp, "debido a grupos insuficientes"))
}
}
library(dplyr)
library(dunn.test)
# Leer los datos
d <- read.table(file_path, header = TRUE, stringsAsFactors = FALSE)
d$Specie <- ordered(d$Specie, levels = c("SE", "SU", "SA", "SK", "SJ", "SM", "SP", "SC"))
d$Temperature <- as.character(d$Temperature)
# Lista de especies
especies <- c("SE", "SU", "SA", "SK", "SJ", "SM", "SP", "SC")
# Bucle para realizar Dunn's test para cada especie y guardar los resultados en tablas separadas
for (esp in especies) {
datos <- d %>% filter(Specie == esp)  # Filtrar los datos para la especie actual
# Convertir 'Strain' en factor
datos$Strain <- as.factor(datos$Strain)
# Verificar si hay al menos dos grupos con más de una observación
if (length(unique(datos$Strain)) > 1 && all(table(datos$Strain) > 1)) {
# Ejecutar Dunn's test
resultado <- dunn.test(datos$Rate, datos$Strain, method = "BH", table = FALSE)
# Verificar si hay resultados de comparaciones
if (length(resultado$comparisons) > 0) {
comparaciones <- do.call(rbind, strsplit(resultado$comparisons, " - "))
# Si solo hay una comparación, convertir a matriz
if (is.null(dim(comparaciones))) {
comparaciones <- matrix(comparaciones, ncol = 2, byrow = TRUE)
}
# Crear un data frame con los resultados
tabla_resultados <- data.frame(
Grupo1 = comparaciones[, 1],
Grupo2 = comparaciones[, 2],
P_value = resultado$P.adjusted
)
# Guardar la tabla en un archivo CSV con el nombre de la especie
output_file <- file.path(output_dir, paste0("DunnTest_", esp, "_Results.csv"))
write.csv(tabla_resultados, file = output_file, row.names = FALSE)
# Mensaje de confirmación
message(paste("Resultados de Dunn's test para", esp, "guardados en", output_file))
} else {
warning(paste("No hay comparaciones para", esp))
}
} else {
warning(paste("No se puede realizar Dunn's test para", esp, "debido a grupos insuficientes"))
}
}
library(dplyr)
library(dunn.test)
# Leer los datos
d <- read.table(file_path, header = TRUE, stringsAsFactors = FALSE)
d$Specie <- ordered(d$Specie, levels = c("SE", "SU", "SA", "SK", "SM", "SP", "SC"))
d$Temperature <- as.character(d$Temperature)
# Lista de especies
especies <- c("SE", "SU", "SA", "SK", "SJ", "SM", "SP", "SC")
# Bucle para realizar Dunn's test para cada especie y guardar los resultados en tablas separadas
for (esp in especies) {
datos <- d %>% filter(Specie == esp)  # Filtrar los datos para la especie actual
# Convertir 'Strain' en factor
datos$Strain <- as.factor(datos$Strain)
# Verificar si hay al menos dos grupos con más de una observación
if (length(unique(datos$Strain)) > 1 && all(table(datos$Strain) > 1)) {
# Ejecutar Dunn's test
resultado <- dunn.test(datos$Rate, datos$Strain, method = "BH", table = FALSE)
# Verificar si hay resultados de comparaciones
if (length(resultado$comparisons) > 0) {
comparaciones <- do.call(rbind, strsplit(resultado$comparisons, " - "))
# Si solo hay una comparación, convertir a matriz
if (is.null(dim(comparaciones))) {
comparaciones <- matrix(comparaciones, ncol = 2, byrow = TRUE)
}
# Crear un data frame con los resultados
tabla_resultados <- data.frame(
Grupo1 = comparaciones[, 1],
Grupo2 = comparaciones[, 2],
P_value = resultado$P.adjusted
)
# Guardar la tabla en un archivo CSV con el nombre de la especie
output_file <- file.path(output_dir, paste0("DunnTest_", esp, "_Results.csv"))
write.csv(tabla_resultados, file = output_file, row.names = FALSE)
# Mensaje de confirmación
message(paste("Resultados de Dunn's test para", esp, "guardados en", output_file))
} else {
warning(paste("No hay comparaciones para", esp))
}
} else {
warning(paste("No se puede realizar Dunn's test para", esp, "debido a grupos insuficientes"))
}
}
# Leer los datos
d <- read.table(file_path, header = TRUE, stringsAsFactors = FALSE)
d$Specie <- ordered(d$Specie, levels = c("SE", "SU", "SA", "SK", "SJ", "SM", "SP", "SC"))
d$Temperature <- as.character(d$Temperature)
# Lista de especies
especies <- c("SE", "SU", "SA", "SK", "SJ", "SM", "SP", "SC")
# Bucle para realizar Dunn's test para cada especie y guardar los resultados en tablas separadas
for (esp in especies) {
datos <- d %>% filter(Specie == esp)  # Filtrar los datos para la especie actual
# Convertir 'Strain' en factor
datos$Strain <- as.factor(datos$Strain)
# Verificar si hay al menos dos grupos con más de una observación
if (length(unique(datos$Strain)) > 1 && all(table(datos$Strain) > 1)) {
# Ejecutar Dunn's test
resultado <- dunn.test(datos$Rate, datos$Strain, method = "BH", table = FALSE)
# Verificar si hay resultados de comparaciones
if (length(resultado$comparisons) > 0) {
comparaciones <- do.call(rbind, strsplit(resultado$comparisons, " - "))
# Si solo hay una comparación, convertir a matriz
if (is.null(dim(comparaciones))) {
comparaciones <- matrix(comparaciones, ncol = 2, byrow = TRUE)
}
# Crear un data frame con los resultados
tabla_resultados <- data.frame(
Grupo1 = comparaciones[, 1],
Grupo2 = comparaciones[, 2],
P_value = resultado$P.adjusted
)
# Mostrar los resultados en la consola
print(paste("Resultados de Dunn's test para", esp))
print(tabla_resultados)
# Guardar la tabla en un archivo CSV con el nombre de la especie
output_file <- file.path(output_dir, paste0("DunnTest_", esp, "_Results.csv"))
write.csv(tabla_resultados, file = output_file, row.names = FALSE)
# Mensaje de confirmación
message(paste("Resultados de Dunn's test para", esp, "guardados en", output_file))
} else {
warning(paste("No hay comparaciones para", esp))
}
} else {
warning(paste("No se puede realizar Dunn's test para", esp, "debido a grupos insuficientes"))
}
}
# Leer los datos
d <- read.table(file_path, header = TRUE, stringsAsFactors = FALSE)
d$Specie <- ordered(d$Specie, levels = c("SE", "SU", "SA", "SK", "SM", "SP", "SC"))
d$Temperature <- as.character(d$Temperature)
# Lista de especies
especies <- c("SE", "SU", "SA", "SK", "SJ", "SM", "SP", "SC")
# Bucle para realizar Dunn's test para cada especie y guardar los resultados en tablas separadas
for (esp in especies) {
datos <- d %>% filter(Specie == esp)  # Filtrar los datos para la especie actual
# Convertir 'Strain' en factor
datos$Strain <- as.factor(datos$Strain)
# Verificar si hay al menos dos grupos con más de una observación
if (length(unique(datos$Strain)) > 1 && all(table(datos$Strain) > 1)) {
# Ejecutar Dunn's test
resultado <- dunn.test(datos$Rate, datos$Strain, method = "BH", table = FALSE)
# Verificar si hay resultados de comparaciones
if (length(resultado$comparisons) > 0) {
comparaciones <- do.call(rbind, strsplit(resultado$comparisons, " - "))
# Si solo hay una comparación, convertir a matriz
if (is.null(dim(comparaciones))) {
comparaciones <- matrix(comparaciones, ncol = 2, byrow = TRUE)
}
# Crear un data frame con los resultados
tabla_resultados <- data.frame(
Grupo1 = comparaciones[, 1],
Grupo2 = comparaciones[, 2],
P_value = resultado$P.adjusted
)
# Mostrar los resultados en la consola
print(paste("Resultados de Dunn's test para", esp))
print(tabla_resultados)
# Guardar la tabla en un archivo CSV con el nombre de la especie
output_file <- file.path(output_dir, paste0("DunnTest_", esp, "_Results.csv"))
write.csv(tabla_resultados, file = output_file, row.names = FALSE)
# Mensaje de confirmación
message(paste("Resultados de Dunn's test para", esp, "guardados en", output_file))
} else {
warning(paste("No hay comparaciones para", esp))
}
} else {
warning(paste("No se puede realizar Dunn's test para", esp, "debido a grupos insuficientes"))
}
}
# Leer los datos
d <- read.table(file_path, header = TRUE, stringsAsFactors = FALSE)
d$Specie <- ordered(d$Specie, levels = c("SE", "SU", "SA", "SK", "SM", "SP", "SC"))
d$Temperature <- as.character(d$Temperature)
my_anova_temp <- kruskal.test(Rate ~ Temperature, data = d)
my_anova_temp
my_anova_species <- kruskal.test(Rate ~ Species, data = d)
# Leer los datos
d <- read.table(file_path, header = TRUE, stringsAsFactors = FALSE)
d$Specie <- ordered(d$Specie, levels = c("SE", "SU", "SA", "SK", "SM", "SP", "SC"))
d$Temperature <- as.character(d$Temperature)
my_anova_temp <- kruskal.test(Rate ~ Temperature, data = d)
my_anova_temp
my_anova_species <- kruskal.test(Rate ~ Specie, data = d)
my_anova_species
resultado_temp <- dunn.test(d$Rate, d$Temperature, method = "BH", table = FALSE)
# Extraer los nombres de los grupos comparados
comparaciones <- as.data.frame(do.call(rbind, strsplit(resultado_temp$comparisons, " - ")))
# Extraer los p-values ajustados
pvalues <- resultado_temp$P.adjusted
# Crear un data frame con los resultados
tabla_resultados_temp <- data.frame(
Grupo1 = comparaciones$V1,
Grupo2 = comparaciones$V2,
P_value = pvalues
)
tabla_resultados_temp
resultado_species <- dunn.test(d$Rate, d$Species, method = "BH", table = FALSE)
# Extraer los nombres de los grupos comparados
comparaciones <- as.data.frame(do.call(rbind, strsplit(resultado_species$comparisons, " - ")))
# Extraer los p-values ajustados
pvalues <- resultado_species$P.adjusted
# Crear un data frame con los resultados
tabla_resultados_species <- data.frame(
Grupo1 = comparaciones$V1,
Grupo2 = comparaciones$V2,
P_value = pvalues
)
tabla_resultados_species
resultado_temp <- dunn.test(d$Rate, d$Temperature, method = "BH", table = FALSE)
# Extraer los nombres de los grupos comparados
comparaciones <- as.data.frame(do.call(rbind, strsplit(resultado_temp$comparisons, " - ")))
# Extraer los p-values ajustados
pvalues <- resultado_temp$P.adjusted
# Crear un data frame con los resultados
tabla_resultados_temp <- data.frame(
Grupo1 = comparaciones$V1,
Grupo2 = comparaciones$V2,
P_value = pvalues
)
tabla_resultados_temp
resultado_species <- dunn.test(d$Rate, d$Specie, method = "BH", table = FALSE)
# Extraer los nombres de los grupos comparados
comparaciones <- as.data.frame(do.call(rbind, strsplit(resultado_species$comparisons, " - ")))
# Extraer los p-values ajustados
pvalues <- resultado_species$P.adjusted
# Crear un data frame con los resultados
tabla_resultados_species <- data.frame(
Grupo1 = comparaciones$V1,
Grupo2 = comparaciones$V2,
P_value = pvalues
)
tabla_resultados_species
file_path <- file.path(input_dir, "Thermal_performance.txt")
datos <- read.table(file_path, header = TRUE, stringsAsFactors = FALSE)
datos$Specie <- ordered(datos$Specie, levels = c("SE", "SU", "SA", "SK", "SJ","SM","SP","SC"))
head(datos)
# Tamaño de muestra y grados de libertad
n <- 3
df <- n - 1
# Nivel de confianza del 95%
confidence_level <- 0.95
t_value <- qt(1 - (1 - confidence_level) / 2, df)
# Calcular los intervalos de confianza
data$rmax_ci_lower <- data$rmax_mean - t_value * data$rmax_se
file_path <- file.path(input_dir, "Thermal_performance.txt")
data <- read.table(file_path, header = TRUE, stringsAsFactors = FALSE)
data$Specie <- ordered(data$Specie, levels = c("SE", "SU", "SA", "SK", "SJ","SM","SP","SC"))
head(data)
# Tamaño de muestra y grados de libertad
n <- 3
df <- n - 1
# Nivel de confianza del 95%
confidence_level <- 0.95
t_value <- qt(1 - (1 - confidence_level) / 2, df)
# Calcular los intervalos de confianza
data$rmax_ci_lower <- data$rmax_mean - t_value * data$rmax_se
